import SwiftUI
import Charts
import UIKit
@_exported import Shapes



struct GraphDemo: View {
    
    let userDefaults = UserDefaults.standard
    @State var doubleQueue = Queue<Double>()
    @State var timeQueue = Queue<String>()
    @StateObject var valuePublisher = ValuePublisher()
    @State var qlist = [Double](repeating: 0.0 , count: 50)
    @State var tlist = [String](repeating: "", count: 11)

    
    var body: some View {
        HStack {
            VStack {
                AxisLabels(.vertical, data: (0...10).reversed(), id: \.self) {
                    Text("\($0 * 10)")
                        .lineSpacing(100)
                        .fontWeight(.bold)
                        .font(Font.system(size: 8))
                        .foregroundColor(.secondary)
                }
                .frame(width: 20)

                //Rectangle().foregroundColor(.clear).frame(width: 20, height: 20)
            }


            VStack {
                Chart(data: doubleQueue.list)
                    .chartStyle(
                        LineChartStyle(.quadCurve,lineColor: .blue, lineWidth: 5)
                    )
                    .padding()
                    .background(
                        GridPattern(horizontalLines: tlist.count*2, verticalLines: qlist.count)
                            .inset(by: 1)
                            .stroke(Color.gray.opacity(0.1), style: .init(lineWidth: 2, lineCap: .round))
                    )
                    .onAppear {
                        doubleQueue.list = userDefaults.object(forKey: "doublequeue") as? [Double] ?? [Double](repeating: 0.0 , count: 50)
                        timeQueue.list = [String](repeating: "", count: 11)
                    }
                    .onChange(of: valuePublisher.value) { value in
                        self.doubleQueue.enqueue(value)
                        _ = self.doubleQueue.dequeue()
                        userDefaults.set(doubleQueue.list, forKey: "doublequeue")
                    }
            }
            .layoutPriority(1)
        }
        .padding()
    }
}

struct GraphDemo_Previews: PreviewProvider {
    static var previews: some View {
        GraphDemo()
    }
}
